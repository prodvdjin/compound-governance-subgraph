// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class NewAdmin extends EthereumEvent {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get oldAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewImplementation extends EthereumEvent {
  get params(): NewImplementation__Params {
    return new NewImplementation__Params(this);
  }
}

export class NewImplementation__Params {
  _event: NewImplementation;

  constructor(event: NewImplementation) {
    this._event = event;
  }

  get oldImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newImplementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewPendingAdmin extends EthereumEvent {
  get params(): NewPendingAdmin__Params {
    return new NewPendingAdmin__Params(this);
  }
}

export class NewPendingAdmin__Params {
  _event: NewPendingAdmin;

  constructor(event: NewPendingAdmin) {
    this._event = event;
  }

  get oldPendingAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPendingAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposalCanceled extends EthereumEvent {
  get params(): ProposalCanceled__Params {
    return new ProposalCanceled__Params(this);
  }
}

export class ProposalCanceled__Params {
  _event: ProposalCanceled;

  constructor(event: ProposalCanceled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalCreated extends EthereumEvent {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get targets(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get signatures(): Array<string> {
    return this._event.parameters[4].value.toStringArray();
  }

  get calldatas(): Array<Bytes> {
    return this._event.parameters[5].value.toBytesArray();
  }

  get startBlock(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[8].value.toString();
  }
}

export class ProposalExecuted extends EthereumEvent {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalQueued extends EthereumEvent {
  get params(): ProposalQueued__Params {
    return new ProposalQueued__Params(this);
  }
}

export class ProposalQueued__Params {
  _event: ProposalQueued;

  constructor(event: ProposalQueued) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get eta(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProposalThresholdSet extends EthereumEvent {
  get params(): ProposalThresholdSet__Params {
    return new ProposalThresholdSet__Params(this);
  }
}

export class ProposalThresholdSet__Params {
  _event: ProposalThresholdSet;

  constructor(event: ProposalThresholdSet) {
    this._event = event;
  }

  get oldProposalThreshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newProposalThreshold(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VoteCast extends EthereumEvent {
  get params(): VoteCast__Params {
    return new VoteCast__Params(this);
  }
}

export class VoteCast__Params {
  _event: VoteCast;

  constructor(event: VoteCast) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get support(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get votes(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class VotingDelaySet extends EthereumEvent {
  get params(): VotingDelaySet__Params {
    return new VotingDelaySet__Params(this);
  }
}

export class VotingDelaySet__Params {
  _event: VotingDelaySet;

  constructor(event: VotingDelaySet) {
    this._event = event;
  }

  get oldVotingDelay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVotingDelay(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VotingPeriodSet extends EthereumEvent {
  get params(): VotingPeriodSet__Params {
    return new VotingPeriodSet__Params(this);
  }
}

export class VotingPeriodSet__Params {
  _event: VotingPeriodSet;

  constructor(event: VotingPeriodSet) {
    this._event = event;
  }

  get oldVotingPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVotingPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GovernorBravo__getActionsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: Array<string>;
  value3: Array<Bytes>;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: Array<string>,
    value3: Array<Bytes>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddressArray(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigIntArray(this.value1));
    map.set("value2", EthereumValue.fromStringArray(this.value2));
    map.set("value3", EthereumValue.fromBytesArray(this.value3));
    return map;
  }
}

export class GovernorBravo__getReceiptResultValue0Struct extends EthereumTuple {
  get hasVoted(): boolean {
    return this[0].toBoolean();
  }

  get support(): i32 {
    return this[1].toI32();
  }

  get votes(): BigInt {
    return this[2].toBigInt();
  }
}

export class GovernorBravo__proposalsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;
  value9: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
    value9: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    map.set("value6", EthereumValue.fromUnsignedBigInt(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    map.set("value8", EthereumValue.fromBoolean(this.value8));
    map.set("value9", EthereumValue.fromBoolean(this.value9));
    return map;
  }
}

export class GovernorBravo extends SmartContract {
  static bind(address: Address): GovernorBravo {
    return new GovernorBravo("GovernorBravo", address);
  }

  BALLOT_TYPEHASH(): Bytes {
    let result = super.call("BALLOT_TYPEHASH", []);

    return result[0].toBytes();
  }

  try_BALLOT_TYPEHASH(): CallResult<Bytes> {
    let result = super.tryCall("BALLOT_TYPEHASH", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call("DOMAIN_TYPEHASH", []);

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): CallResult<Bytes> {
    let result = super.tryCall("DOMAIN_TYPEHASH", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  MAX_PROPOSAL_THRESHOLD(): BigInt {
    let result = super.call("MAX_PROPOSAL_THRESHOLD", []);

    return result[0].toBigInt();
  }

  try_MAX_PROPOSAL_THRESHOLD(): CallResult<BigInt> {
    let result = super.tryCall("MAX_PROPOSAL_THRESHOLD", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  MAX_VOTING_DELAY(): BigInt {
    let result = super.call("MAX_VOTING_DELAY", []);

    return result[0].toBigInt();
  }

  try_MAX_VOTING_DELAY(): CallResult<BigInt> {
    let result = super.tryCall("MAX_VOTING_DELAY", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  MAX_VOTING_PERIOD(): BigInt {
    let result = super.call("MAX_VOTING_PERIOD", []);

    return result[0].toBigInt();
  }

  try_MAX_VOTING_PERIOD(): CallResult<BigInt> {
    let result = super.tryCall("MAX_VOTING_PERIOD", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  MIN_PROPOSAL_THRESHOLD(): BigInt {
    let result = super.call("MIN_PROPOSAL_THRESHOLD", []);

    return result[0].toBigInt();
  }

  try_MIN_PROPOSAL_THRESHOLD(): CallResult<BigInt> {
    let result = super.tryCall("MIN_PROPOSAL_THRESHOLD", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  MIN_VOTING_DELAY(): BigInt {
    let result = super.call("MIN_VOTING_DELAY", []);

    return result[0].toBigInt();
  }

  try_MIN_VOTING_DELAY(): CallResult<BigInt> {
    let result = super.tryCall("MIN_VOTING_DELAY", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  MIN_VOTING_PERIOD(): BigInt {
    let result = super.call("MIN_VOTING_PERIOD", []);

    return result[0].toBigInt();
  }

  try_MIN_VOTING_PERIOD(): CallResult<BigInt> {
    let result = super.tryCall("MIN_VOTING_PERIOD", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", []);

    return result[0].toAddress();
  }

  try_admin(): CallResult<Address> {
    let result = super.tryCall("admin", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  comp(): Address {
    let result = super.call("comp", []);

    return result[0].toAddress();
  }

  try_comp(): CallResult<Address> {
    let result = super.tryCall("comp", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getActions(proposalId: BigInt): GovernorBravo__getActionsResult {
    let result = super.call("getActions", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);

    return new GovernorBravo__getActionsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toStringArray(),
      result[3].toBytesArray()
    );
  }

  try_getActions(
    proposalId: BigInt
  ): CallResult<GovernorBravo__getActionsResult> {
    let result = super.tryCall("getActions", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new GovernorBravo__getActionsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toStringArray(),
        value[3].toBytesArray()
      )
    );
  }

  getReceipt(
    proposalId: BigInt,
    voter: Address
  ): GovernorBravo__getReceiptResultValue0Struct {
    let result = super.call("getReceipt", [
      EthereumValue.fromUnsignedBigInt(proposalId),
      EthereumValue.fromAddress(voter)
    ]);

    return result[0].toTuple() as GovernorBravo__getReceiptResultValue0Struct;
  }

  try_getReceipt(
    proposalId: BigInt,
    voter: Address
  ): CallResult<GovernorBravo__getReceiptResultValue0Struct> {
    let result = super.tryCall("getReceipt", [
      EthereumValue.fromUnsignedBigInt(proposalId),
      EthereumValue.fromAddress(voter)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as GovernorBravo__getReceiptResultValue0Struct
    );
  }

  implementation(): Address {
    let result = super.call("implementation", []);

    return result[0].toAddress();
  }

  try_implementation(): CallResult<Address> {
    let result = super.tryCall("implementation", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  initialProposalId(): BigInt {
    let result = super.call("initialProposalId", []);

    return result[0].toBigInt();
  }

  try_initialProposalId(): CallResult<BigInt> {
    let result = super.tryCall("initialProposalId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  latestProposalIds(param0: Address): BigInt {
    let result = super.call("latestProposalIds", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_latestProposalIds(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("latestProposalIds", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  pendingAdmin(): Address {
    let result = super.call("pendingAdmin", []);

    return result[0].toAddress();
  }

  try_pendingAdmin(): CallResult<Address> {
    let result = super.tryCall("pendingAdmin", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  proposalCount(): BigInt {
    let result = super.call("proposalCount", []);

    return result[0].toBigInt();
  }

  try_proposalCount(): CallResult<BigInt> {
    let result = super.tryCall("proposalCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposalMaxOperations(): BigInt {
    let result = super.call("proposalMaxOperations", []);

    return result[0].toBigInt();
  }

  try_proposalMaxOperations(): CallResult<BigInt> {
    let result = super.tryCall("proposalMaxOperations", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposalThreshold(): BigInt {
    let result = super.call("proposalThreshold", []);

    return result[0].toBigInt();
  }

  try_proposalThreshold(): CallResult<BigInt> {
    let result = super.tryCall("proposalThreshold", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposals(param0: BigInt): GovernorBravo__proposalsResult {
    let result = super.call("proposals", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new GovernorBravo__proposalsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
      result[9].toBoolean()
    );
  }

  try_proposals(param0: BigInt): CallResult<GovernorBravo__proposalsResult> {
    let result = super.tryCall("proposals", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new GovernorBravo__proposalsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
        value[9].toBoolean()
      )
    );
  }

  propose(
    targets: Array<Address>,
    values: Array<BigInt>,
    signatures: Array<string>,
    calldatas: Array<Bytes>,
    description: string
  ): BigInt {
    let result = super.call("propose", [
      EthereumValue.fromAddressArray(targets),
      EthereumValue.fromUnsignedBigIntArray(values),
      EthereumValue.fromStringArray(signatures),
      EthereumValue.fromBytesArray(calldatas),
      EthereumValue.fromString(description)
    ]);

    return result[0].toBigInt();
  }

  try_propose(
    targets: Array<Address>,
    values: Array<BigInt>,
    signatures: Array<string>,
    calldatas: Array<Bytes>,
    description: string
  ): CallResult<BigInt> {
    let result = super.tryCall("propose", [
      EthereumValue.fromAddressArray(targets),
      EthereumValue.fromUnsignedBigIntArray(values),
      EthereumValue.fromStringArray(signatures),
      EthereumValue.fromBytesArray(calldatas),
      EthereumValue.fromString(description)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  quorumVotes(): BigInt {
    let result = super.call("quorumVotes", []);

    return result[0].toBigInt();
  }

  try_quorumVotes(): CallResult<BigInt> {
    let result = super.tryCall("quorumVotes", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  state(proposalId: BigInt): i32 {
    let result = super.call("state", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toI32();
  }

  try_state(proposalId: BigInt): CallResult<i32> {
    let result = super.tryCall("state", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  timelock(): Address {
    let result = super.call("timelock", []);

    return result[0].toAddress();
  }

  try_timelock(): CallResult<Address> {
    let result = super.tryCall("timelock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  votingDelay(): BigInt {
    let result = super.call("votingDelay", []);

    return result[0].toBigInt();
  }

  try_votingDelay(): CallResult<BigInt> {
    let result = super.tryCall("votingDelay", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  votingPeriod(): BigInt {
    let result = super.call("votingPeriod", []);

    return result[0].toBigInt();
  }

  try_votingPeriod(): CallResult<BigInt> {
    let result = super.tryCall("votingPeriod", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class _acceptAdminCall extends EthereumCall {
  get inputs(): _acceptAdminCall__Inputs {
    return new _acceptAdminCall__Inputs(this);
  }

  get outputs(): _acceptAdminCall__Outputs {
    return new _acceptAdminCall__Outputs(this);
  }
}

export class _acceptAdminCall__Inputs {
  _call: _acceptAdminCall;

  constructor(call: _acceptAdminCall) {
    this._call = call;
  }
}

export class _acceptAdminCall__Outputs {
  _call: _acceptAdminCall;

  constructor(call: _acceptAdminCall) {
    this._call = call;
  }
}

export class _initiateCall extends EthereumCall {
  get inputs(): _initiateCall__Inputs {
    return new _initiateCall__Inputs(this);
  }

  get outputs(): _initiateCall__Outputs {
    return new _initiateCall__Outputs(this);
  }
}

export class _initiateCall__Inputs {
  _call: _initiateCall;

  constructor(call: _initiateCall) {
    this._call = call;
  }

  get governorAlpha(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _initiateCall__Outputs {
  _call: _initiateCall;

  constructor(call: _initiateCall) {
    this._call = call;
  }
}

export class _setPendingAdminCall extends EthereumCall {
  get inputs(): _setPendingAdminCall__Inputs {
    return new _setPendingAdminCall__Inputs(this);
  }

  get outputs(): _setPendingAdminCall__Outputs {
    return new _setPendingAdminCall__Outputs(this);
  }
}

export class _setPendingAdminCall__Inputs {
  _call: _setPendingAdminCall;

  constructor(call: _setPendingAdminCall) {
    this._call = call;
  }

  get newPendingAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setPendingAdminCall__Outputs {
  _call: _setPendingAdminCall;

  constructor(call: _setPendingAdminCall) {
    this._call = call;
  }
}

export class _setProposalThresholdCall extends EthereumCall {
  get inputs(): _setProposalThresholdCall__Inputs {
    return new _setProposalThresholdCall__Inputs(this);
  }

  get outputs(): _setProposalThresholdCall__Outputs {
    return new _setProposalThresholdCall__Outputs(this);
  }
}

export class _setProposalThresholdCall__Inputs {
  _call: _setProposalThresholdCall;

  constructor(call: _setProposalThresholdCall) {
    this._call = call;
  }

  get newProposalThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setProposalThresholdCall__Outputs {
  _call: _setProposalThresholdCall;

  constructor(call: _setProposalThresholdCall) {
    this._call = call;
  }
}

export class _setVotingDelayCall extends EthereumCall {
  get inputs(): _setVotingDelayCall__Inputs {
    return new _setVotingDelayCall__Inputs(this);
  }

  get outputs(): _setVotingDelayCall__Outputs {
    return new _setVotingDelayCall__Outputs(this);
  }
}

export class _setVotingDelayCall__Inputs {
  _call: _setVotingDelayCall;

  constructor(call: _setVotingDelayCall) {
    this._call = call;
  }

  get newVotingDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setVotingDelayCall__Outputs {
  _call: _setVotingDelayCall;

  constructor(call: _setVotingDelayCall) {
    this._call = call;
  }
}

export class _setVotingPeriodCall extends EthereumCall {
  get inputs(): _setVotingPeriodCall__Inputs {
    return new _setVotingPeriodCall__Inputs(this);
  }

  get outputs(): _setVotingPeriodCall__Outputs {
    return new _setVotingPeriodCall__Outputs(this);
  }
}

export class _setVotingPeriodCall__Inputs {
  _call: _setVotingPeriodCall;

  constructor(call: _setVotingPeriodCall) {
    this._call = call;
  }

  get newVotingPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setVotingPeriodCall__Outputs {
  _call: _setVotingPeriodCall;

  constructor(call: _setVotingPeriodCall) {
    this._call = call;
  }
}

export class CancelCall extends EthereumCall {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class CastVoteCall extends EthereumCall {
  get inputs(): CastVoteCall__Inputs {
    return new CastVoteCall__Inputs(this);
  }

  get outputs(): CastVoteCall__Outputs {
    return new CastVoteCall__Outputs(this);
  }
}

export class CastVoteCall__Inputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class CastVoteCall__Outputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }
}

export class CastVoteBySigCall extends EthereumCall {
  get inputs(): CastVoteBySigCall__Inputs {
    return new CastVoteBySigCall__Inputs(this);
  }

  get outputs(): CastVoteBySigCall__Outputs {
    return new CastVoteBySigCall__Outputs(this);
  }
}

export class CastVoteBySigCall__Inputs {
  _call: CastVoteBySigCall;

  constructor(call: CastVoteBySigCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CastVoteBySigCall__Outputs {
  _call: CastVoteBySigCall;

  constructor(call: CastVoteBySigCall) {
    this._call = call;
  }
}

export class CastVoteWithReasonCall extends EthereumCall {
  get inputs(): CastVoteWithReasonCall__Inputs {
    return new CastVoteWithReasonCall__Inputs(this);
  }

  get outputs(): CastVoteWithReasonCall__Outputs {
    return new CastVoteWithReasonCall__Outputs(this);
  }
}

export class CastVoteWithReasonCall__Inputs {
  _call: CastVoteWithReasonCall;

  constructor(call: CastVoteWithReasonCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CastVoteWithReasonCall__Outputs {
  _call: CastVoteWithReasonCall;

  constructor(call: CastVoteWithReasonCall) {
    this._call = call;
  }
}

export class ExecuteCall extends EthereumCall {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get timelock_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get comp_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get votingPeriod_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get votingDelay_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get proposalThreshold_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ProposeCall extends EthereumCall {
  get inputs(): ProposeCall__Inputs {
    return new ProposeCall__Inputs(this);
  }

  get outputs(): ProposeCall__Outputs {
    return new ProposeCall__Outputs(this);
  }
}

export class ProposeCall__Inputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get signatures(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get description(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class ProposeCall__Outputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class QueueCall extends EthereumCall {
  get inputs(): QueueCall__Inputs {
    return new QueueCall__Inputs(this);
  }

  get outputs(): QueueCall__Outputs {
    return new QueueCall__Outputs(this);
  }
}

export class QueueCall__Inputs {
  _call: QueueCall;

  constructor(call: QueueCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class QueueCall__Outputs {
  _call: QueueCall;

  constructor(call: QueueCall) {
    this._call = call;
  }
}
